<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personal Knowledge Base</title>
    <style>
        :root {
            --bg-color: #f3f4f6;
            --container-bg: #ffffff;
            --text-color: #1f2937;
            --light-text-color: #6b7280;
            --border-color: #e5e7eb;
            --selected-bg: #e5e7eb;
            --selected-font: 600;
            --primary-button-bg: #3b82f6;
            --primary-button-hover-bg: #2563eb;
            --danger-button-bg: #ef4444;
            --danger-button-hover-bg: #dc2626;
            --secondary-button-bg: #e5e7eb;
            --secondary-button-hover-bg: #d1d5db;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--bg-color);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .main-container {
            display: flex;
            flex-grow: 1;
            padding: 1rem;
            overflow: hidden;
            flex-direction: column;
        }
        @media (min-width: 768px) {
            .main-container {
                flex-direction: row;
            }
            .sidebar {
                width: 300px;
                max-width: none;
                margin-right: 1rem;
            }
        }

        .shadow-sm { box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); }
        .shadow-md { box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); }
        .rounded-lg { border-radius: 0.5rem; }
        .rounded-md { border-radius: 0.375rem; }

        .flex { display: flex; }
        .flex-col { flex-direction: column; }
        .flex-row { flex-direction: row; }
        .flex-grow { flex-grow: 1; }
        .items-center { align-items: center; }
        .justify-between { justify-content: space-between; }
        .justify-center { justify-content: center; }
        .text-center { text-align: center; }
        .space-x-2 > *:not(:first-child) { margin-left: 0.5rem; }
        .ml-4 { margin-left: 1rem; }
        .mb-4 { margin-bottom: 1rem; }
        .mt-4 { margin-top: 1rem; }
        .space-y-1 > *:not(:first-child) { margin-top: 0.25rem; }
        .hidden { display: none; }
        .p-2 { padding: 0.5rem; }
        .p-4 { padding: 1rem; }
        .p-6 { padding: 1.5rem; }
        .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
        .px-4 { padding-left: 1rem; padding-right: 1rem; }
        .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
        .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
        .py-4 { padding-top: 1rem; padding-bottom: 1rem; }
        .pl-4 { padding-left: 1rem; }

        .text-2xl { font-size: 1.5rem; }
        .text-lg { font-size: 1.125rem; }
        .text-sm { font-size: 0.875rem; }
        .text-xs { font-size: 0.75rem; }
        .font-bold { font-weight: 700; }
        .font-semibold { font-weight: 600; }
        .font-normal { font-weight: 400; }

        .text-gray-800 { color: #1f2937; }
        .text-gray-700 { color: #374151; }
        .text-gray-500 { color: #6b7280; }
        .text-white { color: #ffffff; }
        .bg-white { background-color: var(--container-bg); }
        .bg-gray-50 { background-color: #f9fafb; }
        .bg-gray-200 { background-color: var(--secondary-button-bg); }
        .bg-gray-300 { background-color: var(--secondary-button-hover-bg); }
        .bg-blue-500 { background-color: var(--primary-button-bg); }
        .bg-blue-600 { background-color: var(--primary-button-hover-bg); }
        .bg-green-500 { background-color: #22c55e; }
        .bg-green-600 { background-color: #16a34a; }
        .bg-red-500 { background-color: var(--danger-button-bg); }
        .bg-red-600 { background-color: var(--danger-button-hover-bg); }
        
        .transition-colors { transition-property: background-color, border-color, color, fill, stroke; transition-duration: 0.15s; }
        
        .folder-tree { user-select: none; }
        .folder-item, .article-item { cursor: pointer; display: flex; align-items: center; }
        .folder-item:hover, .article-item:hover { background-color: var(--secondary-button-bg); }
        .selected-item { background-color: var(--selected-bg); font-weight: var(--selected-font); }
        .editor-container { flex-grow: 1; }
        .editor {
            min-height: 400px;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 1rem;
            outline: none;
            word-wrap: break-word;
        }
        .editor-toolbar {
            background-color: #f9fafb;
            border: 1px solid var(--border-color);
            border-bottom: none;
            border-top-left-radius: 0.5rem;
            border-top-right-radius: 0.5rem;
            padding: 0.5rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        .editor-toolbar button, .editor-toolbar select, .editor-toolbar input[type="color"] {
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            cursor: pointer;
            background-color: var(--container-bg);
            transition: all 0.2s ease-in-out;
        }
        .editor-toolbar button:hover:not(:disabled) {
            background-color: var(--secondary-button-bg);
        }
        .editor-toolbar button:disabled, .editor-toolbar select:disabled, .editor-toolbar input[type="color"]:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">

    <header class="shadow-sm p-4 flex items-center justify-between" style="background-color: var(--container-bg);">
        <h1 class="text-2xl font-bold text-gray-800">My Knowledge Base</h1>
        <div class="flex space-x-2">
            <button id="export-btn" class="bg-gray-200 text-gray-700 rounded-md px-3 py-1 text-sm hover:bg-gray-300 transition-colors">Export</button>
            <label for="import-file" class="bg-gray-200 text-gray-700 rounded-md px-3 py-1 text-sm hover:bg-gray-300 transition-colors cursor-pointer">Import</label>
            <input type="file" id="import-file" class="hidden">
        </div>
    </header>

    <main class="main-container flex flex-1 p-4 overflow-hidden">
        
        <aside id="sidebar" class="sidebar bg-white rounded-lg shadow-md p-4 flex flex-col overflow-y-auto">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-lg font-semibold text-gray-700">Content</h2>
                <div class="flex space-x-2">
                    <button id="new-folder-btn" class="bg-blue-500 text-white rounded-md px-3 py-1 text-sm hover:bg-blue-600 transition-colors">New Folder</button>
                    <button id="new-article-btn" class="bg-green-500 text-white rounded-md px-3 py-1 text-sm hover:bg-green-600 transition-colors">New Article</button>
                </div>
            </div>
            
            <div id="folder-tree-view" class="flex-1 folder-tree space-y-1">
                <div class="text-gray-500 text-center py-4">Loading content...</div>
            </div>
        </aside>

        <section id="editor-container" class="editor-view flex-1 bg-white rounded-lg shadow-md p-6 flex flex-col hidden">
            <div class="flex items-center justify-between mb-4">
                <input id="article-title-input" type="text" placeholder="Article Title" class="text-2xl font-bold text-gray-800 focus:outline-none w-full bg-gray-50 p-2 rounded-md" disabled>
                <div class="flex space-x-2 ml-4">
                    <button id="save-btn" class="bg-blue-500 text-white rounded-md px-4 py-2 font-semibold hover:bg-blue-600 transition-colors" disabled>Save</button>
                    <button id="delete-btn" class="bg-red-500 text-white rounded-md px-4 py-2 font-semibold hover:bg-red-600 transition-colors" disabled>Delete</button>
                </div>
            </div>

            <div id="editor-toolbar" class="editor-toolbar">
                <select id="text-format" disabled>
                    <option value="p">Paragraph</option>
                    <option value="h1">Heading 1</option>
                    <option value="h2">Heading 2</option>
                    <option value="h3">Heading 3</option>
                    <option value="h4">Heading 4</option>
                    <option value="h5">Heading 5</option>
                    <option value="h6">Heading 6</option>
                </select>
                <select id="text-size" disabled>
                    <option value="1">Extra Small</option>
                    <option value="2">Small</option>
                    <option value="3" selected>Normal</option>
                    <option value="4">Large</option>
                    <option value="5">Extra Large</option>
                    <option value="6">XXL</option>
                    <option value="7">XXXL</option>
                </select>
                <select id="font-family" disabled>
                    <option value="sans-serif" selected>Default</option>
                    <option value="Arial, sans-serif">Arial</option>
                    <option value="Georgia, serif">Georgia</option>
                    <option value="Courier New, monospace">Courier New</option>
                </select>
                <button id="bold-btn" disabled>B</button>
                <button id="italic-btn" disabled>I</button>
                <button id="underline-btn" disabled>U</button>
                <button id="strike-btn" disabled>S</button>
                <input type="color" id="color-picker" disabled>
                <button id="ltr-btn" class="bg-gray-200 text-gray-700 rounded-md px-3 py-1 text-sm hover:bg-gray-300 transition-colors" title="Left-to-Right" disabled>LTR</button>
                <button id="rtl-btn" class="bg-gray-200 text-gray-700 rounded-md px-3 py-1 text-sm hover:bg-gray-300 transition-colors" title="Right-to-Left" disabled>RTL</button>
            </div>
            
            <div id="article-content-editor" contenteditable="true" class="editor flex-1 p-4 rounded-b-lg focus:ring-2 focus:ring-blue-500 overflow-y-auto" disabled></div>
            
            <button id="back-btn" class="hidden md:block mt-4 bg-gray-200 text-gray-700 rounded-md px-4 py-2 font-semibold hover:bg-gray-300 transition-colors">Back to folders</button>
        </section>
        
        <div id="welcome-screen" class="editor-view flex-1 flex items-center justify-center text-center text-gray-500 text-lg hidden">
            <p>Select an article from the left or create a new one to start.</p>
        </div>
    </main>

    <script>
        const sidebar = document.getElementById('sidebar');
        const folderTreeView = document.getElementById('folder-tree-view');
        const editorContainer = document.getElementById('editor-container');
        const welcomeScreen = document.getElementById('welcome-screen');
        const articleTitleInput = document.getElementById('article-title-input');
        const articleContentEditor = document.getElementById('article-content-editor');
        const saveBtn = document.getElementById('save-btn');
        const deleteBtn = document.getElementById('delete-btn');
        const newFolderBtn = document.getElementById('new-folder-btn');
        const newArticleBtn = document.getElementById('new-article-btn');
        const backBtn = document.getElementById('back-btn');
        const exportBtn = document.getElementById('export-btn');
        const importFile = document.getElementById('import-file');
        const editorToolbar = document.getElementById('editor-toolbar');
        const textFormatSelect = document.getElementById('text-format');
        const textSizeSelect = document.getElementById('text-size');
        const fontFamilySelect = document.getElementById('font-family');
        const boldBtn = document.getElementById('bold-btn');
        const italicBtn = document.getElementById('italic-btn');
        const underlineBtn = document.getElementById('underline-btn');
        const strikeBtn = document.getElementById('strike-btn');
        const colorPicker = document.getElementById('color-picker');
        const ltrBtn = document.getElementById('ltr-btn');
        const rtlBtn = document.getElementById('rtl-btn');

        let allArticles = [];
        let selectedItem = null;
        const expandedFolders = new Set();
        
        function loadArticles() {
            const data = localStorage.getItem('knowledgeBaseArticles');
            allArticles = data ? JSON.parse(data) : [];
            renderTree();
            showWelcomeScreen();
        }

        function saveArticles() {
            localStorage.setItem('knowledgeBaseArticles', JSON.stringify(allArticles));
        }

        function renderTree() {
            folderTreeView.innerHTML = '';
            
            const articlesByParent = new Map();
            allArticles.forEach(item => {
                const parentId = item.parent_id || 'root';
                if (!articlesByParent.has(parentId)) {
                    articlesByParent.set(parentId, []);
                }
                articlesByParent.get(parentId).push(item);
            });

            articlesByParent.forEach(items => {
                items.sort((a, b) => {
                    if (a.type !== b.type) {
                        return a.type === 'folder' ? -1 : 1;
                    }
                    return a.name.localeCompare(b.name);
                });
            });

            function buildTree(parentId, container) {
                const items = articlesByParent.get(parentId) || [];
                items.forEach(item => {
                    const el = document.createElement('div');
                    el.classList.add('p-2', 'rounded-md', 'transition-colors', 'duration-200', 'flex', 'items-center', 'space-x-2');
                    
                    const isSelected = selectedItem && selectedItem.id === item.id;
                    if (isSelected) {
                        el.classList.add('selected-item');
                    }

                    if (item.type === 'folder') {
                        el.classList.add('folder-item');
                        const isExpanded = expandedFolders.has(item.id);
                        const arrow = document.createElement('span');
                        arrow.textContent = isExpanded ? '▼' : '►';
                        arrow.style.fontSize = '0.75rem';
                        arrow.style.transform = 'transform';
                        arrow.style.transition = 'transform 0.2s';
                        el.appendChild(arrow);
                        
                        const icon = document.createElement('span');
                        icon.textContent = '📁';
                        icon.style.fontSize = '1.25rem';
                        el.appendChild(icon);

                        const nameSpan = document.createElement('span');
                        nameSpan.textContent = item.name;
                        el.appendChild(nameSpan);

                        el.onclick = (e) => {
                            e.stopPropagation();
                            if (expandedFolders.has(item.id)) {
                                expandedFolders.delete(item.id);
                            } else {
                                expandedFolders.add(item.id);
                            }
                            selectedItem = item;
                            renderTree();
                        };
                        container.appendChild(el);

                        if (isExpanded) {
                            const subContainer = document.createElement('div');
                            subContainer.classList.add('pl-4');
                            subContainer.style.borderLeft = '1px solid var(--border-color)';
                            buildTree(item.id, subContainer);
                            container.appendChild(subContainer);
                        }
                    } else {
                        el.classList.add('article-item');
                        const icon = document.createElement('span');
                        icon.textContent = '📄';
                        icon.style.fontSize = '1.25rem';
                        el.appendChild(icon);

                        const nameSpan = document.createElement('span');
                        nameSpan.textContent = item.name;
                        el.appendChild(nameSpan);

                        el.onclick = () => {
                            selectedItem = item;
                            loadArticle(item);
                            renderTree();
                        };
                        container.appendChild(el);
                    }
                });
            }

            buildTree('root', folderTreeView);
        }

        function toggleEditorButtons(enabled) {
            articleTitleInput.disabled = !enabled;
            articleContentEditor.contentEditable = enabled;
            saveBtn.disabled = !enabled;
            deleteBtn.disabled = !enabled;

            const toolbarButtons = editorToolbar.querySelectorAll('button, select, input[type="color"]');
            toolbarButtons.forEach(button => {
                button.disabled = !enabled;
            });
        }
        
        function showWelcomeScreen() {
            if (window.innerWidth < 768) {
                sidebar.classList.remove('hidden');
                editorContainer.classList.add('hidden');
            }
            welcomeScreen.classList.remove('hidden');
            toggleEditorButtons(false);
        }

        function loadArticle(article) {
            welcomeScreen.classList.add('hidden');
            editorContainer.classList.remove('hidden');
            if (window.innerWidth < 768) {
                sidebar.classList.add('hidden');
            }

            articleTitleInput.value = article.name;
            articleContentEditor.innerHTML = article.content || '';
            articleContentEditor.focus();
            toggleEditorButtons(true);
        }

        function saveArticle() {
            if (!selectedItem) return;
            const index = allArticles.findIndex(item => item.id === selectedItem.id);
            if (index > -1) {
                allArticles[index].name = articleTitleInput.value;
                allArticles[index].content = articleContentEditor.innerHTML;
                saveArticles();
                renderTree();
            }
        }

        function createItem(type) {
            const parentId = selectedItem && selectedItem.type === 'folder' ? selectedItem.id : null;
            const newName = type === 'folder' ? `New Folder` : `New Article`;
            
            const newItem = {
                id: crypto.randomUUID(),
                name: newName,
                type: type,
                parent_id: parentId,
                content: type === 'article' ? '' : null,
            };
            
            allArticles.push(newItem);
            saveArticles();
            selectedItem = newItem;
            
            if (parentId) {
                expandedFolders.add(parentId);
            }
            
            if (type === 'article') {
                loadArticle(newItem);
            } else {
                renderTree();
                showWelcomeScreen();
            }
        }

        function deleteItem(itemToDelete) {
            const itemsToDelete = new Set();
            itemsToDelete.add(itemToDelete.id);
            
            function findChildren(parentId) {
                const children = allArticles.filter(item => item.parent_id === parentId);
                children.forEach(child => {
                    itemsToDelete.add(child.id);
                    if (child.type === 'folder') {
                        findChildren(child.id);
                    }
                });
            }
            
            if (itemToDelete.type === 'folder') {
                findChildren(itemToDelete.id);
            }

            allArticles = allArticles.filter(item => !itemsToDelete.has(item.id));
            saveArticles();
            renderTree();
            selectedItem = null;
            showWelcomeScreen();
        }

        function exportData() {
            const dataStr = JSON.stringify(allArticles, null, 2);
            const blob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `knowledge-base-backup-${new Date().toISOString().slice(0, 10)}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function importData(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const importedData = JSON.parse(e.target.result);
                    if (Array.isArray(importedData)) {
                        allArticles = importedData;
                        saveArticles();
                        renderTree();
                    }
                } catch (error) {
                    console.error('Error importing file:', error);
                }
            };
            reader.readAsText(file);
        }

        function formatDoc(command, value = null) {
            document.execCommand(command, false, value);
        }
        
        textFormatSelect.addEventListener('change', (e) => {
            formatDoc('formatBlock', `<${e.target.value}>`);
        });

        textSizeSelect.addEventListener('change', (e) => {
            formatDoc('fontSize', e.target.value);
        });

        fontFamilySelect.addEventListener('change', (e) => {
            formatDoc('fontName', e.target.value);
        });

        boldBtn.addEventListener('click', () => formatDoc('bold'));
        italicBtn.addEventListener('click', () => formatDoc('italic'));
        underlineBtn.addEventListener('click', () => formatDoc('underline'));
        strikeBtn.addEventListener('click', () => formatDoc('strikeThrough'));
        colorPicker.addEventListener('input', (e) => formatDoc('foreColor', e.target.value));

        ltrBtn.addEventListener('click', () => {
            const selection = window.getSelection();
            if (!selection.rangeCount || selection.isCollapsed) return;
            const range = selection.getRangeAt(0);
            const selectedContent = range.extractContents();
            const span = document.createElement('span');
            span.setAttribute('dir', 'ltr');
            span.appendChild(selectedContent);
            range.insertNode(span);
        });

        rtlBtn.addEventListener('click', () => {
            const selection = window.getSelection();
            if (!selection.rangeCount || selection.isCollapsed) return;
            const range = selection.getRangeAt(0);
            const selectedContent = range.extractContents();
            const span = document.createElement('span');
            span.setAttribute('dir', 'rtl');
            span.appendChild(selectedContent);
            range.insertNode(span);
        });

        saveBtn.addEventListener('click', saveArticle);
        
        deleteBtn.addEventListener('click', () => {
            if (selectedItem) {
                deleteItem(selectedItem);
            }
        });
        
        newFolderBtn.addEventListener('click', () => createItem('folder'));
        newArticleBtn.addEventListener('click', () => createItem('article'));
        backBtn.addEventListener('click', showWelcomeScreen);
        exportBtn.addEventListener('click', exportData);
        importFile.addEventListener('change', importData);
        
        window.onload = loadArticles;
    </script>
</body>
</html>
